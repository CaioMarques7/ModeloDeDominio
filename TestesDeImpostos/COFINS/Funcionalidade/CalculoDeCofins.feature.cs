// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestesDeImpostos.COFINS.Funcionalidade
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Cálculo de COFINS - (Contribuição para o Financiamento da Seguridade Social)")]
    public partial class CalculoDeCOFINS_ContribuicaoParaOFinanciamentoDaSeguridadeSocialFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CalculoDeCofins.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Cálculo de COFINS - (Contribuição para o Financiamento da Seguridade Social)", @"	Para calcular o valor de COFINS de uma operação financeira de qualquer valor
	Como parte de cálculos obrigatórios para realização de operação financeira
	Eu devo informar o valor base da operação em questão e aplicar alíquota de 7,6% sobre o mesmo
	E obter o valor de COFINS a ser cobrado

	NARRATIVA:
	A funcionalidade descrita tem como base fórmula matemática para obtenção do valor de COFINS a ser cobrado.
	O valor de COFINS a ser cobrado é apurado a partir da multiplicação do valor base da operação pela alíquota fixa de 7,6%.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculando o valor de COFINS")]
        [NUnit.Framework.TestCaseAttribute("2491,32", "189,34", new string[0])]
        public virtual void CalculandoOValorDeCOFINS(string valorDaOperacao, string cOFINSCalculado, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculando o valor de COFINS", exampleTags);
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given(string.Format("que uma operação financeira, onde há incidência de COFINS, tem valor de R$ {0}", valorDaOperacao), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 13
 testRunner.When("for calculado o valor de COFINS a ser cobrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 14
 testRunner.Then(string.Format("o valor de COFINS a ser cobrado deve ser igual a R$ {0}", cOFINSCalculado), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
